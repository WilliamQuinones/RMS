/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kitchencodersrms;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author williammcclain
 */
public class Shipment extends javax.swing.JFrame {

    /**
     * Creates new form Shipment
     */
    public Shipment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        back = new javax.swing.JButton();
        enter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        name.setText("name");

        jLabel2.setText("Amount");

        amount.setText("0.00");

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        enter.setText("Enter");
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back)
                        .addGap(241, 241, 241)
                        .addComponent(enter))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addComponent(amount)))
                .addContainerGap(315, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 311, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(enter))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        
        dispose();
        Inventory s = new Inventory();
                        
        s.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
    
    Connection c = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        PreparedStatement ps1 = null;
        c = KitchenCodersRMS.callDatbase();
        Statement stmt;
        try {
            stmt = c.createStatement();
            String sql = "SELECT * FROM Inventory WHERE itemname = ?";
            ps = c.prepareStatement(sql);
            ps.setString(1, name.getText());
            rs = ps.executeQuery();
            System.out.println("query performed");
            ArrayList<String> itemNames = new ArrayList<String>();
            Double amt = null;
            String txt = null;
            String nm = null;
            int type1 = 0;
            int s1a = 0;
            int s2a = 0;
            int s3a = 0;
            int s4a = 0;
            int s5a = 0;
            Double camt = 0.0;
            int ccTime = 0;
            while(rs.next()){
                txt = rs.getString("itemname");
                itemNames.add(txt);
                amt = rs.getDouble("itemamount");
                type1 = rs.getInt("itemtype");
                s1a = rs.getInt("s1amount");
                s2a = rs.getInt("s2amount");
                s3a = rs.getInt("s3amount");
                s4a = rs.getInt("s4amount");
                s5a = rs.getInt("s5amount");
                nm = rs.getString("itemname");
                camt = rs.getDouble("criticalamount");
                ccTime = rs.getInt("criticaltime");
                
                //addInventory(txt);
                //addAmount(amt);
            }
            if(itemNames.size()==0){
                JOptionPane.showMessageDialog(null, "Error: no such item in inventory");

            }
            if(itemNames.size()>1){
                JOptionPane.showMessageDialog(null, "Error: multiple such items in inventory");
            }
            if(itemNames.size()==1){
                //Double amt = rs.getDouble("itemamount");
                 
                
                String amnt = amount.getText();
                Double Amount = Double.parseDouble(amnt);
                Double iAmount = amt + Amount;
                //Double 
                String snumber=null;
                String samount=null;
                String ctime=null;
                if(s1a==0){
                    snumber = "shipment1";
                    samount = "s1amount";
                    ctime = "s1critical";
                } else if(s2a==0){
                    snumber = "shipment2";
                    samount = "s2amount";
                    ctime = "s2critical";
                }else if(s3a==0){
                    snumber = "shipment3";
                    samount = "s3amount";
                    ctime = "s3critical";
                }else if(s4a==0){
                    snumber = "shipment4";
                    samount = "s4amount";
                    ctime = "s4critical";
                }else if(s5a==0){
                    snumber = "shipment5";
                    samount = "s5amount";
                    ctime = "s5critical";
                }else{
                    JOptionPane.showMessageDialog(null, "Error: no open shipment values");
                    dispose();
                    Shipment s = new Shipment();
                        
                    s.setVisible(true);
                }
                
              // sql = "INSERT INTO Inventory WHERE itemname = ? (itemamount, ?, ?, ?)"
                  //      +"VALUES (?, ?, ?, ?)";
        
           // ps1 = c.prepareStatement(sql);
            int currentTime = 0;
            
            Long sysTime = System.currentTimeMillis();
            Long divTime = sysTime / 1000;
            String divTimes = divTime.toString();
            currentTime = Integer.parseInt(divTimes);
            int crTime = currentTime + ccTime;
            stmt = c.createStatement();
            
            sql = "UPDATE Inventory SET itemamount = "+iAmount+" WHERE itemname = '"+txt+"';";
            
            stmt.executeUpdate(sql);
            sql = "UPDATE Inventory SET "+snumber+" = "+currentTime+" WHERE itemname = '"+txt+"';";
            
            stmt.executeUpdate(sql);
            sql = "UPDATE Inventory SET "+samount+" = "+Amount+" WHERE itemname = '"+txt+"';";
            
            stmt.executeUpdate(sql);
            sql = "UPDATE Inventory SET "+ctime+" = "+crTime+" WHERE itemname = '"+txt+"';";
            
            stmt.executeUpdate(sql);
            // Date dt = new Date(Date().getTime());
            //int crTime = (int) (new Date().getTime()/1000);
            /*
            sql = "UPDATE Inventory (itemamount, "+snumber+", "+samount+", "+ctime+") WHERE itemname = "+txt+" "
                        +"VALUES ("+iAmount+", "+currentTime+", "+Amount+", "+crTime+")";
            ps1.setString(1, txt);
            ps1.setString(2, snumber);
            ps1.setString(3, samount);
            ps1.setString(4, ctime);
            
           // ps.setInt(3, type1);
            ps1.setDouble(5, iAmount);
            ps1.setInt(6, currentTime);
            ps1.setDouble(7, Amount);
            
            ps1.setInt(8, crTime);
           
            //ps.setDouble(4, cAmount);
            
            ps1.executeUpdate(); */
            stmt = c.createStatement();
            stmt.executeUpdate(sql);
            //c.commit();
           
            }
            
            c.close();
            dispose();
        Inventory s = new Inventory();
                        
        s.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_enterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Shipment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Shipment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Shipment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Shipment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Shipment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.JButton back;
    private javax.swing.JButton enter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField name;
    // End of variables declaration//GEN-END:variables
}
